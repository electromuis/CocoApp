type User {
    id: ID!
    name: String
    email: String
  }
  type Room {
    id: ID!
    name: String
    owner: User
    users: [User]
    alerts: [Alert]
  }
  enum AlertResponseType {
    YES,
    NO,
    HOST
  }
  type AlertResponse {
    response: AlertResponseType!
    user: User!
  }
  type Alert {
    id: ID!
    room: Room!
    creator: User!
    createdAt: String
    responses: [AlertResponse]
    responded: AlertResponse
  }
  enum AcceptedType {
    ANY,
    YES,
    NO,
    EMPTY
  }
  type Invite {
    room: Room!
    user: User!
    accepted: Boolean
  }
  type AuthPayload {
    token: String!
    user: User!
  }
  enum NetworkType {
    google,
    facebook
  }

  type Subscription {
    alertSent: Alert!
  }

  type Query {
    hello: String
    user(id: ID!): User
    rooms: [Room]
    room(id: ID!): Room
    invites(accepted: AcceptedType): [Invite]
    alerts(responded: Boolean): [Alert]
  }

  type Mutation {
    register(
      name: String
      email: String
      password: String
    ): AuthPayload!

    loginWith(
      token: String!
      network: NetworkType!
    ): AuthPayload!

    login(
      email: String
      password: String
    ): AuthPayload!

    validateToken(token: String!): User!

    addRoom(name: String!): Room!
    addAlert(roomId: ID!, response: AlertResponseType): Alert!
    alertResponse(alertId: ID!, response: AlertResponseType!): AlertResponse!

    invite(userId: ID!, roomId: ID!): Invite!
    inviteResponse(roomId: ID!, accepted: Boolean!): Invite!
  }